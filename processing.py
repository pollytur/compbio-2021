from enum import auto
from occurence import *

file_path_initial = "outputs/dic_initial.txt"
file_path_variant = "outputs/dic_variant.txt"
output_file_path_initial = "outputs/dic_initial_filtered.txt"
output_file_path_variant = "outputs/dic_variant_filtered.txt"


def file_extractor(file_path):
    """
    returns a dictionnary which is the same than the one created in occurence.py
    """
    d = defaultdict(int)
    with open(file_path, "r") as f:
        for line in f.readlines():
            S = line.split()
            d[S[0]] = int(S[1])
    return d


def filter_out(dic, threshold):
    """
    returns the dictionnary generated by file_extractor but filtered
    """
    return dict(filter(lambda occurence: int(occurence[1]) > threshold, dic.items()))


def find_records_with_mutation(file_path, mutation):
    """
    aims to find from which read the k-mer mutation is extracted
    """
    dic = defaultdict(int)
    #we parse the .fna file
    records = list(Bio.SeqIO.parse(file_path,"fasta"))
    counter = 0
    total_counter = 0
    for record in records[:int(len(records))]:
        #for each sample we extract the nucleotide sequence in the SEQ variable
        SEQ = str(record.seq)
        if SEQ.find(mutation) != -1:
            dic[SEQ] += 1
            counter += 1
        total_counter += 1
    print('Percentage of reads contains that mutations = ', counter/total_counter)
    return dic


def automatic_threshold_finder(dictionary):
    """
    finds a good threshold for the filtering assuming that
    the distribution of dictionnary values is adapted for such an operation
    """
    current = sum(value == 1 for value in dictionary.values())
    next = sum(value == 2 for value in dictionary.values())
    counter = 3
    while (current - next > 0):
        current = next
        next = sum(value == counter for value in dictionary.values())
        counter += 1
    return counter - 1


